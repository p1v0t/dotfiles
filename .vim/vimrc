let mapleader = "'"
		
if has('gui')
   set guifont=Roboto\ Mono
endif

call plug#begin('~/.vim/plugged')

Plug 'Shougo/neoinclude.vim'
Plug 'jsfaint/coc-neoinclude'
Plug 'neoclide/coc.nvim', {'for':['zig','cmake','rust',
			\'java','json', 'haskell', 'ts','sh', 'cs',
			\'yaml', 'c', 'cpp', 'd', 'go',
			\'python', 'dart', 'javascript', 'vim'], 'branch': 'release'}

Plug 'rust-lang/rust.vim', {'for' : ['rust']}
Plug 'ziglang/zig.vim', {'for' : ['zig']}
Plug 'dense-analysis/ale', {'for' : ['yaml',  'sh', 'vim', 'javascript']}

Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'

Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'aditya-azad/candle-grey'

Plug 'itchyny/lightline.vim',{'frozen': 1}
Plug 'dracula/vim',{'frozen': 1}
Plug 'NLKNguyen/papercolor-theme',{'frozen': 1}

Plug 'mileszs/ack.vim',{'frozen': 1}
Plug 'rhysd/vim-clang-format', {'for' : ['c', 'cpp']}

Plug 'mattn/emmet-vim' , {'for' : ['html', 'css']}
Plug 'tarekbecker/vim-yaml-formatter', {'for' :['yaml']}

Plug 'preservim/nerdtree'

call plug#end()



" nerdtree-settings  {{{
nnoremap ne :NERDTreeToggle <Enter>
" }}}

" coc-settings {{{

" use tab to trigger and confirm completion, snippet 
"
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<TAB>"
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()


inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

nmap <silent><Tab>j <Plug>(coc-diagnostic-next)
nmap <silent><Tab>k <Plug>(coc-diagnostic-prev)

nmap <silent><leader>c <Plug>(coc-rename)
nmap <silent><leader>a <Plug>(coc-definition)
nmap <silent><leader>r <Plug>(coc-references)
nmap <silent><leader>w <Plug>(coc-declaration)
nmap <silent><leader>f <Plug>(coc-fix-current)
nmap <silent>fo <Plug>(coc-format)
nmap <silent><leader>i <Plug>(coc-implementation)
nmap <silent><leader>t <Plug>(coc-type-definition)
nmap <silent>fa <Plug>(coc-refactor)

nmap <silent>s <Plug>(coc-range-select)
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)

"nmap <silent><leader>d <Plug>(coc-codeaction)
"nmap <silent>d <Plug>(coc-float-hide)
"nmap <silent><leader>d <Plug>(coc-range-select)
"nmap <silent><Tab>] <Plug>(coc-diagnostic-prev-error)
"nmap <silent><Tab>[ <Plug>(coc-diagnostic-next-error)

let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'
let g:coc_global_extensions = ['coc-snippets', 'coc-json', 'coc-java', 'coc-cmake']
" }}}

" ack {{{
let g:ackprg = 'ag --vimgrep'
" }}}

" Goyo {{{
let g:goyo_width = 90
let g:goyo_height = 170
let g:goyo_linenr = 0
nnoremap <silent><C-f> :Goyo<enter>
" }}}

" Limelight {{{
nmap <silent><Leader>l :Limelight!! 0.7<enter>
xmap <silent><Leader>l :Limelight!! 0.7<enter>
" }}}

" lightline {{{
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ }

" }}}

let g:clang_rename_path='clang-rename'
noremap <leader>cr :py3f /usr/bin/clang-rename.py<cr>

colorscheme PaperColor

nnoremap <nowait> ; :
nnoremap <silent>ve :edit $MYVIMRC<enter>


augroup Some_other_goodies 
    autocmd! BufWritePost $MYVIMRC source $MYVIMRC
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
augroup end

noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

inoremap <Up> <nop>
inoremap <Down> <nop>
inoremap <Left> <nop>
inoremap <Right> <nop>

noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

nnoremap Q <nop>

" options {{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab

set nohlsearch
set incsearch
set hidden
set nobackup
set nowritebackup
set updatetime=300
set shortmess+=c 
set signcolumn=yes
set smarttab
set nonumber
set ttyfast
set showcmd
set cmdheight=1
set swapfile
set nobackup
set noerrorbells
set autowrite
set ignorecase
set ruler 
set cursorline
set colorcolumn=110
set title
set showmatch
set noshowmode
set mouse=v
set modifiable
set splitright
set splitbelow
set shortmess=atI
set backspace=indent,eol,start
set wildmenu
set encoding=utf-8 nobomb
set binary
set autoread
set mousehide
set spelllang=en_US
set fileformat=unix
set autoread
set autowrite
set laststatus=2
set termwinsize=10*0
set number
set background=dark
set formatoptions=c,l,1,p
" }}}

