source ~/.vim/defaults.vim

let mapleader = "'"
		
" plugins {{{
call plug#begin('~/.vim/plugged')

Plug 'Shougo/neoinclude.vim'
Plug 'jsfaint/coc-neoinclude'
Plug 'neoclide/coc.nvim', {'for':['zig','cmake','rust',
			\'java','json', 'haskell', 'ts','sh',
			\'yaml', 'c', 'cpp', 'd', 'go',
			\'python', 'dart', 'javascript', 'vim'], 
			\'do': { -> coc#util#install()}}

Plug 'rust-lang/rust.vim', {'for' : ['rust']}
Plug 'ziglang/zig.vim', {'for' : ['zig']}
Plug 'dense-analysis/ale', {'for' : ['yaml', 'cpp', 'sh', 'vim', 'javascript']}
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'

Plug 'vim-scripts/SingleCompile'

Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

Plug 'ollykel/v-vim', {'for' : ['v']}

Plug 'itchyny/lightline.vim',{'frozen': 1}
Plug 'dracula/vim',{'frozen': 1}
Plug 'NLKNguyen/papercolor-theme',{'frozen': 1}

Plug 'mileszs/ack.vim',{'frozen': 1}
Plug 'rhysd/vim-clang-format', {'for' : ['c', 'cpp']}
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'mattn/emmet-vim' , {'for' : ['html', 'css']}
Plug 'kkoomen/vim-doge', {'for' :['cpp']}
Plug 'tarekbecker/vim-yaml-formatter', {'for' :['yaml']}

call plug#end()

" pluginsVariables {{{

" coc-settings {{{

" use tab to trigger and confirm completion, snippet 
inoremap <silent><expr> <TAB> 
			\ pumvisible() ? coc#_select_confirm() : 
			\ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" : 
			\ <SID>check_back_space() ? "\<TAB>" : 
			\ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<Tab>'
let g:coc_snippet_prev = '<S-Tab>'

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
	  \ pumvisible() ? "\<C-n>" :
	  \ <SID>check_back_space() ? "\<TAB>" :
	  \ coc#refresh()

nmap <silent><Tab>j <Plug>(coc-diagnostic-next)
nmap <silent><Tab>k <Plug>(coc-diagnostic-prev)

nmap <silent><leader>c <Plug>(coc-rename)
nmap <silent><leader>a <Plug>(coc-definition)
nmap <silent><leader>r <Plug>(coc-references)
nmap <silent><leader>w <Plug>(coc-declaration)
nmap <silent><leader>f <Plug>(coc-fix-current)
nmap <silent>fo <Plug>(coc-format)
nmap <silent><leader>i <Plug>(coc-implementation)
nmap <silent><leader>t <Plug>(coc-type-definition)
nmap <silent>fa <Plug>(coc-refactor)

"nmap <silent><leader>d <Plug>(coc-codeaction)
"nmap <silent>d <Plug>(coc-float-hide)
"nmap <silent><leader>d <Plug>(coc-range-select)
"nmap <silent><Tab>] <Plug>(coc-diagnostic-prev-error)
"nmap <silent><Tab>[ <Plug>(coc-diagnostic-next-error)

let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'
" }}}

" ack {{{
let g:ackprg = 'ag --vimgrep'
" }}}

" Goyo {{{
let g:goyo_width = 90
let g:goyo_height = 120
let g:goyo_linenr = 0
nnoremap <silent><C-f> :Goyo<enter>
" }}}

" Limelight {{{
nmap <silent><Leader>l :Limelight!! 0.7<enter>
xmap <silent><Leader>l :Limelight!! 0.7<enter>
" }}}

" ALE {{{
let g:ale_lint_delay = 10
" }}}

" lightline {{{
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ }
" }}}

" variables {{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab

set hlsearch
set incsearch
set hidden
set nobackup
set nowritebackup
set updatetime=300
set shortmess+=c 
set signcolumn=yes
set smarttab
set nonumber
set ttyfast
set showcmd
set cmdheight=1
set swapfile
set nobackup
set noerrorbells
set autowrite
set ignorecase
set ruler 
set cursorline
set colorcolumn=110
set title
set showmatch
set noshowmode
set mouse=v
set modifiable
set splitright
set splitbelow
set shortmess=atI
set backspace=indent,eol,start
set wildmenu
set encoding=utf-8 nobomb
set binary
set autoread
set mousehide
set spelllang=en_US
set fileformat=unix
set autoread
set autowrite
set laststatus=2
set termwinsize=10*0
set number
" }}}

set background=dark
colorscheme PaperColor